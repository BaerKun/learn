深拷贝：
void copyTo(InArr src, OutArr dst, InArr mask);

连接：
	横向：
		void vconcat(InputArray, InputArray, OutputArray);
		void vconcat(const Mat *src, size_t nsrc, OutputArray dst);
		// 需要相同的宽度、通道数和数据类型

	纵向：
		void hconcat(...);
			        (...);

变换尺寸：
	void resize(InputArray src, OutputArray dst, Size dsize,
		double fx=0, double fy=0, int interpolation=INTER_LINEAR);
		// fx, fy：x，y轴的缩放
		// 两种方式使用其中一个，若有冲突，则使用dsize
		// interpolation：插值方法 = INTER_
					NEAREST
					LINEAR
					CUBIC
					AREA
					LANCZOS4
					LINEAR_EXACT
					MAX

翻转：
	void flip(InArr src, OutArr dst, int flipCode);
		// flipCode > 0，y轴翻转；
				== 0，x轴翻转；
				< 0，x、y轴翻转

仿射变换：
	旋转：
		Mat getRotationMatrix2D(Point2f center, double angle, double scale);
			// 旋转中心；旋转角度（逆时针、角度）；放缩比例

	通用：
		Mat getAffineTransform(const Point2f src[], const Point2f dst[]);
			// 原图3点；变换后3点

	// 两者输出矩阵格式：[A, B]：矩阵A和向量B
					[[A00, A01, B0],
					 [A10, A11, B1]]
	变换：
		void warpAffine(InArr src, OutArr dst, InArr M, Size dsize,
			int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT,
			const Scalar &borderValue=Scalar());
			// M：变换矩阵 [2 * 3]
			// dsize：输出图像尺寸
			// flags = INTER_... | WARP_
								FILL_OUTLIERS
								INVERSE_MAP		取M的逆
			// borderMode = BORDER_
							CONSTANT	borderValue填充
							REPLICATE	两段复制 aaa|abc|ccc
							REFLECT		倒序 cba|abc|cba
							WRAP		正序 abc|abc|abc
							DEFAULT		除边界倒序 dcb|abcd|cba
							TRANSPAPENT
							ISOLATED
			// (X', Y') = A * (X, Y) + B

透视变换：
	Mat getPerspectiveTransform(const Point2f src[], const Point2f dst[],
			int solveMethod=DECOMP_LU);
		// 原图4点；变换后4点；计算方法
		// solveMethod = DECOMP_
					LU/SVD/EIG/CHOLESKY/QR/NORMAL
		// 可能不存在透视矩阵
		// 输出：3 * 3

	void warpPerspective(... /* 同仿射变换 */);

极坐标变换：
	void warpPolar(InArr src, OutArr dst, Size dsize, Point2f center, double maxRadius, int flags);
		// flags = INTER_... | WARP_
						POLAR_LINEAR	极坐标变换
						POLAR_LOG		半对数极坐标变换 (r -> ln(r))
						INVERSE_MAP		逆变换

图像金字塔：
	高斯金字塔：
		层数		0	1	2	3 	...
		Size		1	/2	/4	/8	...

		i -> i+1方法：
			1. 原图卷积（高斯模糊）：
				卷积核 = [[	1,	4,	6,	4,	1	],
						[	4,	6,	24,	6,	4	],
						[	6,	24,	36,	24,	6	],
						[	4,	16,	24,	16,	4	],
						[	1,	4,	6,	4,	1	]] / 256
			2. 取偶数行核列

	void pyrDown(InArr src, OutArr dst, const Size &dstsize=Size(),
		int borderType=BORDER_DEFAULT);
		// dstsize：dst尺寸；默认宽高取半
			但是必须满足：|dstsize.width * 2 - src.cols| <= 2
						|dstsize.height * 2 - src.rows| <= 2

	void pyrUp(...);
		// dstsize = src.size() * 2 +- 1

	// 设置dstsize是为了确保在pyrDown和pyrUp的循环中，size不变
	// 一般不需要手动设置dstsize

	拉普拉斯金字塔：
		i层：
			i -> pyrDown -> i + 1 -> pyrUp -> j
			i -= j;

傅里叶变换：
    void dft(In src, Out dst, int flags=0, int nonzeroRows=0);
    - src: CV_32/64FC1/2
    - dst: C1/2         // C1实数，C2复数
    - flags=DFT_
                INVERSE         逆变换
                SCALE           输出处以元素个数N
                ROWS            对每行做一维傅里叶变换，否则做二维变换
                COMPLEX_OUTPUT  输出复数
                REAL_OUTPUT     输出实数
                COMPLEX_INPUT   输入复数
    - nonzeroRows：非零行数，用于减少计算；默认计算所有行

    void idft(In src, Out dst, int flags=0, int nonzeroRows=0);
    // 逆傅里叶变换，相当于 dft + DFT_INVERSE

    int getOptimalDFTSize(int vecsize);
    // 返回>=vecsize的2、3、5的最小公倍数
    // 为了加速快速傅里叶变换FFT的递归

    void copyMakeBorder(In src, Out dst, int top, int bottom, int left, int right,
        int borderType, const Scalar &value=Scalar());
        // 填充

    void magnitude(In x, In y, Out magnitude);
    // 计算幅值=sqrt(x ** 2 + y ** 2)

    void mulSpectrums(In a, In b, Out c, int flags, bool conjB=false);
    // 频谱相乘，即傅里叶变换输出结果
    - flags：同上
    - conjB：是否对b进行共轭变换


余弦变换：
    // 即傅里叶变换结果只取实数

    void dct(In, Out, int flags=0);
    - flags=DCT_INVERSE/ROWS

    void idct(In, Out, int flags=0);
    
    
积分图像：
    原图(w, h) -> 积分图像(w + 1, h + 1)：
        I'(X, Y) = sum(f(I(x, y)))

    标准求和：f(I) = I           0 <= x < X, 0 <= y < Y
    平方求和：f(I) = I ** 2      0 <= x < X, 0 <= y < Y
    倾斜求和：f(I) = I           abs(X - x) < Y - y, 0 <= y < Y

    void integral(In src, Out sum, int sdepth=-1);
    // 标准求和
    - src: CV_8U/32F/64F
    - sdepth：输出数据类型，CV_32S/32F/64F

    void integral(In src, Out sum, Out sqsum, [Out tilted,] int sdepth=-1, int sqdepth=-1);
    - tilted：倾斜求和，数据类型和sum相同
    - sqdepth=CV_32F/64F


图像分割：
    漫水填充法：
        1.选择种子点，加入区域
        2.以区域中一点为中心，计算4或8邻域的像素和该点的差值，将差值小于阈值的点加入区域
        3.递归

        int floodFill(InOut image, [InOut mask,] Point seedPoint, Scalar newVal, Rect *rect=0,
            Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4);
            - mask：填充区域的标记，需要提前初始化；而且宽高需要比image大2，用来提供边界缓冲
            - newVal：区域填充的值（在image）
            - Rect：区域的矩形范围
            - loDiff, upDiff：只有像素值在 [seed - loDiff, seed + upDiff] 内的点才会被加到区域
            - flags：4/8（邻域）+ FLOODFILL_FIXED_
                                                RANGE   只考虑与种子的差值，否则用每次递归的中心点和邻域做差
                                                MASK_ONLY   不改变image    若没有输入mask则没用
            // 返回区域点个数

    分水岭法：
        类似漫水填充，都从种子出发，但是通过比较梯度，并以一个优先队列选取下一个操作点。
        梯度小的点被优先分配
        该方法会将整张图像分为若干区域，并划出边界（分水岭）

        void watershed(In image, InOut markers);
        - markers：与image尺寸相同的CV_32SC1图像，
            输入：
                0 -> 背景，算法需要分割的区域
                >0 -> 种子，不同的值会当作不同的“水域”
            输出：
                >0 -> 不同的区域
                -1 -> 区域的边界（分水岭）
        // 8-邻域

    Grabcut：
        void grabCut(...);

    Mean-Shift：
        void pyrMeanShiftFiltering(...);


图像修复：
    void inpaint(In src, In inpaintMask, Out dst, double inpaintRadius, int flags);
    - inpaintMask：需要修复的像素标记
    - flags=INPAINT_
                    NS      Navier-Stokes
                    TELEA   Alexandru Telea
